#!/usr/bin/env python3

'''
Generated by Soft9000/PyDAO, Ver. 2.0 (Alpha)
Generated @ Sun Apr 30 11:35:59 2023
'''

from collections import OrderedDict

import sqlite3


class Ledger:

    def __init__(self):
        self.db = 'C:/tmp/PyDAO/SqltDAO/Ledger.sqlt3'
        self.conn = None
        self.curs = None
        self.bOpen = False
        self.fields = OrderedDict([('ID', 'integer'), ('Date', 'text'), ('Amount', 'real'), ('Information', 'text')])
        self.table_name = 'Ledger'
        
    @classmethod
    def get_fields(cls, value):
        if isinstance(value, cls):
            return list(value.fields.values())[1:]
        return value
        
    def open(self):
        if self.bOpen is False:
            self.conn = sqlite3.connect(self.db)
            self.conn.row_factory = sqlite3.Row
            self.curs = self.conn.cursor()
            self.bOpen = True
        return True
        
    def close(self):
        if self.bOpen:
            self.conn.commit()
            self.bOpen = False
        return True
        
    def count(self):
        if self.bOpen:
            res = self.curs.execute("SELECT count(*) FROM Ledger;")
            return res.fetchone()[0]
        return -1
        
    def drop_table(self):
        if self.bOpen:
            self.curs.execute("DrOp TaBLe IF EXISTS Ledger;")
            return True
        return False
        
    def create_table(self):
        if self.bOpen:
            self.curs.execute("CREATE TABLE IF NOT EXISTS Ledger(ID INTEGER PRIMARY KEY AUTOINCREMENT, Date text, Amount real, Information text);")
            return True
        return False
        
    def insert(self, fields):
        fields = Ledger.get_fields(fields)
        if self.bOpen:
            self.curs.execute("INSERT INTO Ledger ( Date, Amount, Information) VALUES (?,?,?);", fields)
            return True
        return False
        
    def update(self, id_, fields):
        fields = Ledger.get_fields(fields)
        if self.bOpen:
            self.curs.execute("UPDATE Ledger SET Date=?, Amount=?, Information=? WHERE ID = {};".format(id_), fields)
            return True
        return False
        
    def delete(self, primary_key):
        if self.bOpen:
            self.curs.execute("DELETE from Ledger WHERE ID = ?;", [primary_key])
            return True
        return False
        
    def select(self, sql_select):
        if self.bOpen:
            self.curs.execute(sql_select)
            zlist = self.curs.fetchall()
            for ref in zlist:
                try:
                    yield ref
                except:
                    pass
            return None
            
        @staticmethod
        def Import(dao, encoding=None, text_file='Ledger.sqlt3.txt', hasHeader=True, sep='|'):
            try:
                # dao.open()
                with open(text_file, encoding=encoding) as fh:
                    line = fh.readline().strip()
                    if hasHeader is True:
                        line = fh.readline().strip()
                    while len(line) != 0:
                        if dao.insert(line.split(sep)) is False:
                            return False
                        line = fh.readline().strip()
                # dao.close()
                return True
            except:
                pass
            return False
            
        

